/* tslint:disable */
/* eslint-disable */
/**
 * Vipul Waghmare APIs
 * All the APIs created
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AartiResponseDto
 */
export interface AartiResponseDto {
    /**
     * 
     * @type {string}
     * @memberof AartiResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AartiResponseDto
     */
    'name_marathi': string;
    /**
     * 
     * @type {string}
     * @memberof AartiResponseDto
     */
    'name_english': string;
    /**
     * 
     * @type {string}
     * @memberof AartiResponseDto
     */
    'deity': string;
    /**
     * 
     * @type {string}
     * @memberof AartiResponseDto
     */
    'lyrics_marathi': string;
    /**
     * 
     * @type {string}
     * @memberof AartiResponseDto
     */
    'lyrics_english': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AartiResponseDto
     */
    'tags': Array<string>;
}
/**
 * 
 * @export
 * @interface ContactMeDto
 */
export interface ContactMeDto {
    /**
     * 
     * @type {string}
     * @memberof ContactMeDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ContactMeDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ContactMeDto
     */
    'subject': string;
    /**
     * 
     * @type {string}
     * @memberof ContactMeDto
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface CreateAartiDto
 */
export interface CreateAartiDto {
    /**
     * Name of the aarti in Marathi
     * @type {string}
     * @memberof CreateAartiDto
     */
    'name_marathi': string;
    /**
     * Name of the aarti in English
     * @type {string}
     * @memberof CreateAartiDto
     */
    'name_english': string;
    /**
     * Name of the deity
     * @type {string}
     * @memberof CreateAartiDto
     */
    'deity': string;
    /**
     * Lyrics of the aarti in Marathi
     * @type {string}
     * @memberof CreateAartiDto
     */
    'lyrics_marathi': string;
    /**
     * Lyrics of the aarti in English
     * @type {string}
     * @memberof CreateAartiDto
     */
    'lyrics_english': string;
    /**
     * Tags/categories for the aarti
     * @type {Array<string>}
     * @memberof CreateAartiDto
     */
    'tags': Array<string>;
}
/**
 * 
 * @export
 * @interface CreateGymNotesResponseDto
 */
export interface CreateGymNotesResponseDto {
    /**
     * The type of workout
     * @type {string}
     * @memberof CreateGymNotesResponseDto
     */
    'type': string;
    /**
     * The duration of the workout in minutes
     * @type {number}
     * @memberof CreateGymNotesResponseDto
     */
    'duration': number;
    /**
     * 
     * @type {Array<GymProgressExerciseDto>}
     * @memberof CreateGymNotesResponseDto
     */
    'exercises': Array<GymProgressExerciseDto>;
    /**
     * A brief description of the workout
     * @type {string}
     * @memberof CreateGymNotesResponseDto
     */
    'notes': string;
    /**
     * The date of the event
     * @type {string}
     * @memberof CreateGymNotesResponseDto
     */
    'date': string;
}
/**
 * 
 * @export
 * @interface CreateHealthNotesResponseDto
 */
export interface CreateHealthNotesResponseDto {
    /**
     * 
     * @type {Array<DietEntryDto>}
     * @memberof CreateHealthNotesResponseDto
     */
    'diet': Array<DietEntryDto>;
    /**
     * Notes about the diet and health
     * @type {string}
     * @memberof CreateHealthNotesResponseDto
     */
    'notes': string;
    /**
     * The date of the event
     * @type {string}
     * @memberof CreateHealthNotesResponseDto
     */
    'date': string;
}
/**
 * 
 * @export
 * @interface CreatePersonalNotesResponseDto
 */
export interface CreatePersonalNotesResponseDto {
    /**
     * The title of the event
     * @type {string}
     * @memberof CreatePersonalNotesResponseDto
     */
    'title': string;
    /**
     * A brief description of the event
     * @type {string}
     * @memberof CreatePersonalNotesResponseDto
     */
    'content': string;
    /**
     * The date of the event
     * @type {string}
     * @memberof CreatePersonalNotesResponseDto
     */
    'date': string;
}
/**
 * 
 * @export
 * @interface CreateRoomDto
 */
export interface CreateRoomDto {
    /**
     * 
     * @type {string}
     * @memberof CreateRoomDto
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface CreateRoomResponseDto
 */
export interface CreateRoomResponseDto {
    /**
     * 
     * @type {string}
     * @memberof CreateRoomResponseDto
     */
    'roomId': string;
}
/**
 * 
 * @export
 * @interface CreateSongDto
 */
export interface CreateSongDto {
    /**
     * Name of the song in Marathi
     * @type {string}
     * @memberof CreateSongDto
     */
    'name_marathi': string;
    /**
     * Name of the song in English
     * @type {string}
     * @memberof CreateSongDto
     */
    'name_english': string;
    /**
     * Lyrics of the song in Marathi
     * @type {string}
     * @memberof CreateSongDto
     */
    'lyrics_marathi'?: string;
    /**
     * Lyrics of the song in English
     * @type {string}
     * @memberof CreateSongDto
     */
    'lyrics_english': string;
    /**
     * Meaning or description of the song
     * @type {string}
     * @memberof CreateSongDto
     */
    'meaning'?: string;
    /**
     * Name of the singer
     * @type {string}
     * @memberof CreateSongDto
     */
    'singer'?: string;
    /**
     * Name of the lyricist
     * @type {string}
     * @memberof CreateSongDto
     */
    'lyricist'?: string;
    /**
     * Tags/categories for the song
     * @type {Array<string>}
     * @memberof CreateSongDto
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {MusicLinksDto}
     * @memberof CreateSongDto
     */
    'musicLinks'?: MusicLinksDto;
    /**
     * Starting letter of the song in Marathi
     * @type {string}
     * @memberof CreateSongDto
     */
    'startLetter': string;
}
/**
 * 
 * @export
 * @interface CreateUserDto
 */
export interface CreateUserDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface CreateWorkNotesResponseDto
 */
export interface CreateWorkNotesResponseDto {
    /**
     * The title of the event
     * @type {string}
     * @memberof CreateWorkNotesResponseDto
     */
    'title': string;
    /**
     * A brief description of the event
     * @type {string}
     * @memberof CreateWorkNotesResponseDto
     */
    'content': string;
    /**
     * The date of the event
     * @type {string}
     * @memberof CreateWorkNotesResponseDto
     */
    'date': string;
}
/**
 * 
 * @export
 * @interface DeleteGymEntryDto
 */
export interface DeleteGymEntryDto {
    /**
     * 
     * @type {string}
     * @memberof DeleteGymEntryDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DeleteGymEntryDto
     */
    'date': string;
}
/**
 * 
 * @export
 * @interface DeleteHealthEntryDto
 */
export interface DeleteHealthEntryDto {
    /**
     * 
     * @type {string}
     * @memberof DeleteHealthEntryDto
     */
    'date': string;
}
/**
 * 
 * @export
 * @interface DeletePersonalEntryDto
 */
export interface DeletePersonalEntryDto {
    /**
     * 
     * @type {string}
     * @memberof DeletePersonalEntryDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DeletePersonalEntryDto
     */
    'date': string;
}
/**
 * 
 * @export
 * @interface DeleteWorkEntryDto
 */
export interface DeleteWorkEntryDto {
    /**
     * 
     * @type {string}
     * @memberof DeleteWorkEntryDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DeleteWorkEntryDto
     */
    'date': string;
}
/**
 * 
 * @export
 * @interface DietEntryDto
 */
export interface DietEntryDto {
    /**
     * The name of the food item
     * @type {string}
     * @memberof DietEntryDto
     */
    'name': string;
    /**
     * The calories contained in the food item
     * @type {number}
     * @memberof DietEntryDto
     */
    'calories': number;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * HTTP status code
     * @type {number}
     * @memberof ErrorResponse
     */
    'statusCode': number;
    /**
     * Error type
     * @type {string}
     * @memberof ErrorResponse
     */
    'error': string;
    /**
     * List of validation errors
     * @type {Array<ValidationError>}
     * @memberof ErrorResponse
     */
    'details': Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface ForgotPasswordDto
 */
export interface ForgotPasswordDto {
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface GetAllDiaryDataResponseDto
 */
export interface GetAllDiaryDataResponseDto {
    /**
     * 
     * @type {Array<GetPersonalNotesResponseDto>}
     * @memberof GetAllDiaryDataResponseDto
     */
    'personal': Array<GetPersonalNotesResponseDto>;
    /**
     * 
     * @type {Array<GetWorkNotesResponseDto>}
     * @memberof GetAllDiaryDataResponseDto
     */
    'work': Array<GetWorkNotesResponseDto>;
    /**
     * 
     * @type {Array<GetGymProgressResponseDto>}
     * @memberof GetAllDiaryDataResponseDto
     */
    'gym': Array<GetGymProgressResponseDto>;
    /**
     * 
     * @type {GetHealthLogResponseDto}
     * @memberof GetAllDiaryDataResponseDto
     */
    'health': GetHealthLogResponseDto;
    /**
     * The weight of the person in kg
     * @type {number}
     * @memberof GetAllDiaryDataResponseDto
     */
    'weight': number;
    /**
     * The height of the person in cm
     * @type {number}
     * @memberof GetAllDiaryDataResponseDto
     */
    'height': number;
    /**
     * id of the event
     * @type {string}
     * @memberof GetAllDiaryDataResponseDto
     */
    '_id': string;
    /**
     * user id
     * @type {string}
     * @memberof GetAllDiaryDataResponseDto
     */
    'userId': string;
    /**
     * date
     * @type {string}
     * @memberof GetAllDiaryDataResponseDto
     */
    'date': string;
}
/**
 * 
 * @export
 * @interface GetDietEntryDto
 */
export interface GetDietEntryDto {
    /**
     * The name of the food item
     * @type {string}
     * @memberof GetDietEntryDto
     */
    'name': string;
    /**
     * The calories contained in the food item
     * @type {number}
     * @memberof GetDietEntryDto
     */
    'calories': number;
    /**
     * id of the event
     * @type {string}
     * @memberof GetDietEntryDto
     */
    '_id': string;
}
/**
 * 
 * @export
 * @interface GetGymProgressResponseDto
 */
export interface GetGymProgressResponseDto {
    /**
     * The type of workout
     * @type {string}
     * @memberof GetGymProgressResponseDto
     */
    'type': string;
    /**
     * The duration of the workout in minutes
     * @type {number}
     * @memberof GetGymProgressResponseDto
     */
    'duration': number;
    /**
     * 
     * @type {Array<GetGymProgressResponseExerciseDto>}
     * @memberof GetGymProgressResponseDto
     */
    'exercises': Array<GetGymProgressResponseExerciseDto>;
    /**
     * A brief description of the workout
     * @type {string}
     * @memberof GetGymProgressResponseDto
     */
    'notes': string;
    /**
     * id of the event
     * @type {string}
     * @memberof GetGymProgressResponseDto
     */
    '_id': string;
}
/**
 * 
 * @export
 * @interface GetGymProgressResponseExerciseDto
 */
export interface GetGymProgressResponseExerciseDto {
    /**
     * The name of the exercise
     * @type {string}
     * @memberof GetGymProgressResponseExerciseDto
     */
    'name': string;
    /**
     * The number of sets
     * @type {number}
     * @memberof GetGymProgressResponseExerciseDto
     */
    'sets': number;
    /**
     * The number of reps
     * @type {number}
     * @memberof GetGymProgressResponseExerciseDto
     */
    'reps': number;
    /**
     * The weight in kg
     * @type {number}
     * @memberof GetGymProgressResponseExerciseDto
     */
    'weight'?: number;
    /**
     * The duration in minutes
     * @type {number}
     * @memberof GetGymProgressResponseExerciseDto
     */
    'duration'?: number;
    /**
     * id of the event
     * @type {string}
     * @memberof GetGymProgressResponseExerciseDto
     */
    '_id': string;
}
/**
 * 
 * @export
 * @interface GetHealthLogResponseDto
 */
export interface GetHealthLogResponseDto {
    /**
     * 
     * @type {Array<GetDietEntryDto>}
     * @memberof GetHealthLogResponseDto
     */
    'diet': Array<GetDietEntryDto>;
    /**
     * Notes about the diet and health
     * @type {string}
     * @memberof GetHealthLogResponseDto
     */
    'notes': string;
}
/**
 * 
 * @export
 * @interface GetPersonalNotesResponseDto
 */
export interface GetPersonalNotesResponseDto {
    /**
     * The title of the event
     * @type {string}
     * @memberof GetPersonalNotesResponseDto
     */
    'title': string;
    /**
     * A brief description of the event
     * @type {string}
     * @memberof GetPersonalNotesResponseDto
     */
    'content': string;
    /**
     * id of the event
     * @type {string}
     * @memberof GetPersonalNotesResponseDto
     */
    '_id': string;
}
/**
 * 
 * @export
 * @interface GetUserDto
 */
export interface GetUserDto {
    /**
     * The name of the user
     * @type {string}
     * @memberof GetUserDto
     */
    'name': string;
    /**
     * The email of the user
     * @type {string}
     * @memberof GetUserDto
     */
    'email': string;
    /**
     * The phone number of the user
     * @type {string}
     * @memberof GetUserDto
     */
    'phoneNumber': string;
    /**
     * The date of birth of the user
     * @type {string}
     * @memberof GetUserDto
     */
    'dob': string;
    /**
     * The bio of the user
     * @type {string}
     * @memberof GetUserDto
     */
    'bio': string;
    /**
     * The ID of the user
     * @type {string}
     * @memberof GetUserDto
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface GetWorkNotesResponseDto
 */
export interface GetWorkNotesResponseDto {
    /**
     * The title of the event
     * @type {string}
     * @memberof GetWorkNotesResponseDto
     */
    'title': string;
    /**
     * A brief description of the event
     * @type {string}
     * @memberof GetWorkNotesResponseDto
     */
    'content': string;
    /**
     * id of the event
     * @type {string}
     * @memberof GetWorkNotesResponseDto
     */
    '_id': string;
}
/**
 * 
 * @export
 * @interface GymProgressExerciseDto
 */
export interface GymProgressExerciseDto {
    /**
     * The name of the exercise
     * @type {string}
     * @memberof GymProgressExerciseDto
     */
    'name': string;
    /**
     * The number of sets
     * @type {number}
     * @memberof GymProgressExerciseDto
     */
    'sets': number;
    /**
     * The number of reps
     * @type {number}
     * @memberof GymProgressExerciseDto
     */
    'reps': number;
    /**
     * The weight in kg
     * @type {number}
     * @memberof GymProgressExerciseDto
     */
    'weight'?: number;
    /**
     * The duration in minutes
     * @type {number}
     * @memberof GymProgressExerciseDto
     */
    'duration'?: number;
}
/**
 * 
 * @export
 * @interface JoinRoomDto
 */
export interface JoinRoomDto {
    /**
     * 
     * @type {string}
     * @memberof JoinRoomDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof JoinRoomDto
     */
    'roomId': string;
}
/**
 * 
 * @export
 * @interface JoinRoomResponseDto
 */
export interface JoinRoomResponseDto {
    /**
     * 
     * @type {string}
     * @memberof JoinRoomResponseDto
     */
    'roomId': string;
}
/**
 * 
 * @export
 * @interface LoginResponseDto
 */
export interface LoginResponseDto {
    /**
     * Success message
     * @type {string}
     * @memberof LoginResponseDto
     */
    'success': string;
    /**
     * JWT access token
     * @type {string}
     * @memberof LoginResponseDto
     */
    'accessToken': string;
    /**
     * MongoDB user ID
     * @type {string}
     * @memberof LoginResponseDto
     */
    'userId': string;
    /**
     * User email
     * @type {string}
     * @memberof LoginResponseDto
     */
    'email': string;
    /**
     * User name
     * @type {string}
     * @memberof LoginResponseDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface LoginUserDto
 */
export interface LoginUserDto {
    /**
     * 
     * @type {string}
     * @memberof LoginUserDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginUserDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface MusicLinksDto
 */
export interface MusicLinksDto {
    /**
     * Spotify link for the song
     * @type {string}
     * @memberof MusicLinksDto
     */
    'spotify'?: string;
    /**
     * YouTube link for the song
     * @type {string}
     * @memberof MusicLinksDto
     */
    'youtube'?: string;
    /**
     * JioSaavn link for the song
     * @type {string}
     * @memberof MusicLinksDto
     */
    'jiosaavn'?: string;
    /**
     * Gaana link for the song
     * @type {string}
     * @memberof MusicLinksDto
     */
    'gaana'?: string;
}
/**
 * 
 * @export
 * @interface MusicLinksResponseDto
 */
export interface MusicLinksResponseDto {
    /**
     * 
     * @type {string}
     * @memberof MusicLinksResponseDto
     */
    'spotify'?: string;
    /**
     * 
     * @type {string}
     * @memberof MusicLinksResponseDto
     */
    'youtube'?: string;
    /**
     * 
     * @type {string}
     * @memberof MusicLinksResponseDto
     */
    'jiosaavn'?: string;
    /**
     * 
     * @type {string}
     * @memberof MusicLinksResponseDto
     */
    'gaana'?: string;
}
/**
 * 
 * @export
 * @interface ResetPasswordDto
 */
export interface ResetPasswordDto {
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordDto
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface SongResponseDto
 */
export interface SongResponseDto {
    /**
     * 
     * @type {string}
     * @memberof SongResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof SongResponseDto
     */
    'name_marathi': string;
    /**
     * 
     * @type {string}
     * @memberof SongResponseDto
     */
    'name_english': string;
    /**
     * 
     * @type {string}
     * @memberof SongResponseDto
     */
    'lyrics_marathi'?: string;
    /**
     * 
     * @type {string}
     * @memberof SongResponseDto
     */
    'lyrics_english': string;
    /**
     * 
     * @type {string}
     * @memberof SongResponseDto
     */
    'meaning'?: string;
    /**
     * 
     * @type {string}
     * @memberof SongResponseDto
     */
    'singer'?: string;
    /**
     * 
     * @type {string}
     * @memberof SongResponseDto
     */
    'lyricist'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SongResponseDto
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {MusicLinksResponseDto}
     * @memberof SongResponseDto
     */
    'musicLinks'?: MusicLinksResponseDto;
    /**
     * 
     * @type {string}
     * @memberof SongResponseDto
     */
    'startLetter': string;
}
/**
 * 
 * @export
 * @interface UpdateGymNotesResponseDto
 */
export interface UpdateGymNotesResponseDto {
    /**
     * The type of workout
     * @type {string}
     * @memberof UpdateGymNotesResponseDto
     */
    'type': string;
    /**
     * The duration of the workout in minutes
     * @type {number}
     * @memberof UpdateGymNotesResponseDto
     */
    'duration': number;
    /**
     * 
     * @type {Array<GymProgressExerciseDto>}
     * @memberof UpdateGymNotesResponseDto
     */
    'exercises': Array<GymProgressExerciseDto>;
    /**
     * A brief description of the workout
     * @type {string}
     * @memberof UpdateGymNotesResponseDto
     */
    'notes': string;
    /**
     * The date of the event
     * @type {string}
     * @memberof UpdateGymNotesResponseDto
     */
    'date': string;
    /**
     * The ID of the event
     * @type {string}
     * @memberof UpdateGymNotesResponseDto
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface UpdateHealthNotesResponseDto
 */
export interface UpdateHealthNotesResponseDto {
    /**
     * 
     * @type {Array<DietEntryDto>}
     * @memberof UpdateHealthNotesResponseDto
     */
    'diet': Array<DietEntryDto>;
    /**
     * Notes about the diet and health
     * @type {string}
     * @memberof UpdateHealthNotesResponseDto
     */
    'notes': string;
    /**
     * The date of the event
     * @type {string}
     * @memberof UpdateHealthNotesResponseDto
     */
    'date': string;
}
/**
 * 
 * @export
 * @interface UpdatePasswordDto
 */
export interface UpdatePasswordDto {
    /**
     * 
     * @type {string}
     * @memberof UpdatePasswordDto
     */
    'newPassword': string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePasswordDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UpdatePersonalNotesResponseDto
 */
export interface UpdatePersonalNotesResponseDto {
    /**
     * The title of the event
     * @type {string}
     * @memberof UpdatePersonalNotesResponseDto
     */
    'title': string;
    /**
     * A brief description of the event
     * @type {string}
     * @memberof UpdatePersonalNotesResponseDto
     */
    'content': string;
    /**
     * The date of the event
     * @type {string}
     * @memberof UpdatePersonalNotesResponseDto
     */
    'date': string;
    /**
     * The ID of the event
     * @type {string}
     * @memberof UpdatePersonalNotesResponseDto
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface UpdateUserDto
 */
export interface UpdateUserDto {
    /**
     * The name of the user
     * @type {string}
     * @memberof UpdateUserDto
     */
    'name': string;
    /**
     * The email of the user
     * @type {string}
     * @memberof UpdateUserDto
     */
    'email': string;
    /**
     * The phone number of the user
     * @type {string}
     * @memberof UpdateUserDto
     */
    'phoneNumber': string;
    /**
     * The date of birth of the user
     * @type {string}
     * @memberof UpdateUserDto
     */
    'dob': string;
    /**
     * The bio of the user
     * @type {string}
     * @memberof UpdateUserDto
     */
    'bio': string;
}
/**
 * 
 * @export
 * @interface UpdateWorkNotesResponseDto
 */
export interface UpdateWorkNotesResponseDto {
    /**
     * The title of the event
     * @type {string}
     * @memberof UpdateWorkNotesResponseDto
     */
    'title': string;
    /**
     * A brief description of the event
     * @type {string}
     * @memberof UpdateWorkNotesResponseDto
     */
    'content': string;
    /**
     * The date of the event
     * @type {string}
     * @memberof UpdateWorkNotesResponseDto
     */
    'date': string;
    /**
     * The ID of the event
     * @type {string}
     * @memberof UpdateWorkNotesResponseDto
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * Field that caused the error
     * @type {string}
     * @memberof ValidationError
     */
    'field': string;
    /**
     * Error message
     * @type {string}
     * @memberof ValidationError
     */
    'message': string;
}

/**
 * AppApi - axios parameter creator
 * @export
 */
export const AppApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppApi - functional programming interface
 * @export
 */
export const AppApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetHello(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetHello(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AppApi.appControllerGetHello']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AppApi - factory interface
 * @export
 */
export const AppApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.appControllerGetHello(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppApi - object-oriented interface
 * @export
 * @class AppApi
 * @extends {BaseAPI}
 */
export class AppApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public appControllerGetHello(options?: RawAxiosRequestConfig) {
        return AppApiFp(this.configuration).appControllerGetHello(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ForgotPasswordDto} forgotPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerForgotPassword: async (forgotPasswordDto: ForgotPasswordDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'forgotPasswordDto' is not null or undefined
            assertParamExists('authControllerForgotPassword', 'forgotPasswordDto', forgotPasswordDto)
            const localVarPath = `/auth/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginUserDto} loginUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (loginUserDto: LoginUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginUserDto' is not null or undefined
            assertParamExists('authControllerLogin', 'loginUserDto', loginUserDto)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register User
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister: async (createUserDto: CreateUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserDto' is not null or undefined
            assertParamExists('authControllerRegister', 'createUserDto', createUserDto)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordDto} resetPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerResetPassword: async (resetPasswordDto: ResetPasswordDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resetPasswordDto' is not null or undefined
            assertParamExists('authControllerResetPassword', 'resetPasswordDto', resetPasswordDto)
            const localVarPath = `/auth/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdatePasswordDto} updatePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerUpdatePassword: async (updatePasswordDto: UpdatePasswordDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updatePasswordDto' is not null or undefined
            assertParamExists('authControllerUpdatePassword', 'updatePasswordDto', updatePasswordDto)
            const localVarPath = `/auth/update-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ForgotPasswordDto} forgotPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerForgotPassword(forgotPasswordDto: ForgotPasswordDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerForgotPassword(forgotPasswordDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerForgotPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LoginUserDto} loginUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(loginUserDto: LoginUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(loginUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogout(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogout(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerLogout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Register User
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerRegister(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerRegister(createUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerRegister']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ResetPasswordDto} resetPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerResetPassword(resetPasswordDto: ResetPasswordDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerResetPassword(resetPasswordDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerResetPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdatePasswordDto} updatePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerUpdatePassword(updatePasswordDto: UpdatePasswordDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerUpdatePassword(updatePasswordDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerUpdatePassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {ForgotPasswordDto} forgotPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerForgotPassword(forgotPasswordDto: ForgotPasswordDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerForgotPassword(forgotPasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginUserDto} loginUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(loginUserDto: LoginUserDto, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponseDto> {
            return localVarFp.authControllerLogin(loginUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerLogout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register User
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerRegister(createUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPasswordDto} resetPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerResetPassword(resetPasswordDto: ResetPasswordDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerResetPassword(resetPasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdatePasswordDto} updatePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerUpdatePassword(updatePasswordDto: UpdatePasswordDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerUpdatePassword(updatePasswordDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {ForgotPasswordDto} forgotPasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerForgotPassword(forgotPasswordDto: ForgotPasswordDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerForgotPassword(forgotPasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginUserDto} loginUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogin(loginUserDto: LoginUserDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerLogin(loginUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogout(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerLogout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register User
     * @param {CreateUserDto} createUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerRegister(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerRegister(createUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetPasswordDto} resetPasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerResetPassword(resetPasswordDto: ResetPasswordDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerResetPassword(resetPasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdatePasswordDto} updatePasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerUpdatePassword(updatePasswordDto: UpdatePasswordDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerUpdatePassword(updatePasswordDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DiaryApi - axios parameter creator
 * @export
 */
export const DiaryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DeleteGymEntryDto} deleteGymEntryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diaryControllerDeleteGymEntry: async (deleteGymEntryDto: DeleteGymEntryDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteGymEntryDto' is not null or undefined
            assertParamExists('diaryControllerDeleteGymEntry', 'deleteGymEntryDto', deleteGymEntryDto)
            const localVarPath = `/diary/entry/gym`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteGymEntryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteHealthEntryDto} deleteHealthEntryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diaryControllerDeleteHealthEntry: async (deleteHealthEntryDto: DeleteHealthEntryDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteHealthEntryDto' is not null or undefined
            assertParamExists('diaryControllerDeleteHealthEntry', 'deleteHealthEntryDto', deleteHealthEntryDto)
            const localVarPath = `/diary/entry/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteHealthEntryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeletePersonalEntryDto} deletePersonalEntryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diaryControllerDeletePersonalEntry: async (deletePersonalEntryDto: DeletePersonalEntryDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deletePersonalEntryDto' is not null or undefined
            assertParamExists('diaryControllerDeletePersonalEntry', 'deletePersonalEntryDto', deletePersonalEntryDto)
            const localVarPath = `/diary/entry/personal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deletePersonalEntryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteWorkEntryDto} deleteWorkEntryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diaryControllerDeleteWorkEntry: async (deleteWorkEntryDto: DeleteWorkEntryDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteWorkEntryDto' is not null or undefined
            assertParamExists('diaryControllerDeleteWorkEntry', 'deleteWorkEntryDto', deleteWorkEntryDto)
            const localVarPath = `/diary/entry/work`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteWorkEntryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} body 
         * @param {string} [date] date
         * @param {string} [dateFrom] date from
         * @param {string} [dateTo] date to
         * @param {DiaryControllerGetAllDataTypeEnum} [type] Entry type, should be one of: personal, gym, health, work
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diaryControllerGetAllData: async (body: object, date?: string, dateFrom?: string, dateTo?: string, type?: DiaryControllerGetAllDataTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('diaryControllerGetAllData', 'body', body)
            const localVarPath = `/diary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (date !== undefined) {
                localVarQueryParameter['date'] = date;
            }

            if (dateFrom !== undefined) {
                localVarQueryParameter['dateFrom'] = dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['dateTo'] = dateTo;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateGymNotesResponseDto} createGymNotesResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diaryControllerPostGymEntry: async (createGymNotesResponseDto: CreateGymNotesResponseDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createGymNotesResponseDto' is not null or undefined
            assertParamExists('diaryControllerPostGymEntry', 'createGymNotesResponseDto', createGymNotesResponseDto)
            const localVarPath = `/diary/entry/gym`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGymNotesResponseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateHealthNotesResponseDto} createHealthNotesResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diaryControllerPostHealthEntry: async (createHealthNotesResponseDto: CreateHealthNotesResponseDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createHealthNotesResponseDto' is not null or undefined
            assertParamExists('diaryControllerPostHealthEntry', 'createHealthNotesResponseDto', createHealthNotesResponseDto)
            const localVarPath = `/diary/entry/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createHealthNotesResponseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreatePersonalNotesResponseDto} createPersonalNotesResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diaryControllerPostPersonalEntry: async (createPersonalNotesResponseDto: CreatePersonalNotesResponseDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPersonalNotesResponseDto' is not null or undefined
            assertParamExists('diaryControllerPostPersonalEntry', 'createPersonalNotesResponseDto', createPersonalNotesResponseDto)
            const localVarPath = `/diary/entry/personal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPersonalNotesResponseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateWorkNotesResponseDto} createWorkNotesResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diaryControllerPostWorkEntry: async (createWorkNotesResponseDto: CreateWorkNotesResponseDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createWorkNotesResponseDto' is not null or undefined
            assertParamExists('diaryControllerPostWorkEntry', 'createWorkNotesResponseDto', createWorkNotesResponseDto)
            const localVarPath = `/diary/entry/work`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWorkNotesResponseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateGymNotesResponseDto} updateGymNotesResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diaryControllerPutGymEntry: async (updateGymNotesResponseDto: UpdateGymNotesResponseDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateGymNotesResponseDto' is not null or undefined
            assertParamExists('diaryControllerPutGymEntry', 'updateGymNotesResponseDto', updateGymNotesResponseDto)
            const localVarPath = `/diary/entry/gym`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateGymNotesResponseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateHealthNotesResponseDto} updateHealthNotesResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diaryControllerPutHealthEntry: async (updateHealthNotesResponseDto: UpdateHealthNotesResponseDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateHealthNotesResponseDto' is not null or undefined
            assertParamExists('diaryControllerPutHealthEntry', 'updateHealthNotesResponseDto', updateHealthNotesResponseDto)
            const localVarPath = `/diary/entry/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateHealthNotesResponseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdatePersonalNotesResponseDto} updatePersonalNotesResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diaryControllerPutPersonalEntry: async (updatePersonalNotesResponseDto: UpdatePersonalNotesResponseDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updatePersonalNotesResponseDto' is not null or undefined
            assertParamExists('diaryControllerPutPersonalEntry', 'updatePersonalNotesResponseDto', updatePersonalNotesResponseDto)
            const localVarPath = `/diary/entry/personal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePersonalNotesResponseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateWorkNotesResponseDto} updateWorkNotesResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diaryControllerPutWorkEntry: async (updateWorkNotesResponseDto: UpdateWorkNotesResponseDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateWorkNotesResponseDto' is not null or undefined
            assertParamExists('diaryControllerPutWorkEntry', 'updateWorkNotesResponseDto', updateWorkNotesResponseDto)
            const localVarPath = `/diary/entry/work`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateWorkNotesResponseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DiaryApi - functional programming interface
 * @export
 */
export const DiaryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DiaryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DeleteGymEntryDto} deleteGymEntryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async diaryControllerDeleteGymEntry(deleteGymEntryDto: DeleteGymEntryDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.diaryControllerDeleteGymEntry(deleteGymEntryDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DiaryApi.diaryControllerDeleteGymEntry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {DeleteHealthEntryDto} deleteHealthEntryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async diaryControllerDeleteHealthEntry(deleteHealthEntryDto: DeleteHealthEntryDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.diaryControllerDeleteHealthEntry(deleteHealthEntryDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DiaryApi.diaryControllerDeleteHealthEntry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {DeletePersonalEntryDto} deletePersonalEntryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async diaryControllerDeletePersonalEntry(deletePersonalEntryDto: DeletePersonalEntryDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.diaryControllerDeletePersonalEntry(deletePersonalEntryDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DiaryApi.diaryControllerDeletePersonalEntry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {DeleteWorkEntryDto} deleteWorkEntryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async diaryControllerDeleteWorkEntry(deleteWorkEntryDto: DeleteWorkEntryDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.diaryControllerDeleteWorkEntry(deleteWorkEntryDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DiaryApi.diaryControllerDeleteWorkEntry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {object} body 
         * @param {string} [date] date
         * @param {string} [dateFrom] date from
         * @param {string} [dateTo] date to
         * @param {DiaryControllerGetAllDataTypeEnum} [type] Entry type, should be one of: personal, gym, health, work
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async diaryControllerGetAllData(body: object, date?: string, dateFrom?: string, dateTo?: string, type?: DiaryControllerGetAllDataTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllDiaryDataResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.diaryControllerGetAllData(body, date, dateFrom, dateTo, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DiaryApi.diaryControllerGetAllData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateGymNotesResponseDto} createGymNotesResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async diaryControllerPostGymEntry(createGymNotesResponseDto: CreateGymNotesResponseDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.diaryControllerPostGymEntry(createGymNotesResponseDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DiaryApi.diaryControllerPostGymEntry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateHealthNotesResponseDto} createHealthNotesResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async diaryControllerPostHealthEntry(createHealthNotesResponseDto: CreateHealthNotesResponseDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.diaryControllerPostHealthEntry(createHealthNotesResponseDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DiaryApi.diaryControllerPostHealthEntry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreatePersonalNotesResponseDto} createPersonalNotesResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async diaryControllerPostPersonalEntry(createPersonalNotesResponseDto: CreatePersonalNotesResponseDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.diaryControllerPostPersonalEntry(createPersonalNotesResponseDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DiaryApi.diaryControllerPostPersonalEntry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateWorkNotesResponseDto} createWorkNotesResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async diaryControllerPostWorkEntry(createWorkNotesResponseDto: CreateWorkNotesResponseDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.diaryControllerPostWorkEntry(createWorkNotesResponseDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DiaryApi.diaryControllerPostWorkEntry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateGymNotesResponseDto} updateGymNotesResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async diaryControllerPutGymEntry(updateGymNotesResponseDto: UpdateGymNotesResponseDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.diaryControllerPutGymEntry(updateGymNotesResponseDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DiaryApi.diaryControllerPutGymEntry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateHealthNotesResponseDto} updateHealthNotesResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async diaryControllerPutHealthEntry(updateHealthNotesResponseDto: UpdateHealthNotesResponseDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.diaryControllerPutHealthEntry(updateHealthNotesResponseDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DiaryApi.diaryControllerPutHealthEntry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdatePersonalNotesResponseDto} updatePersonalNotesResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async diaryControllerPutPersonalEntry(updatePersonalNotesResponseDto: UpdatePersonalNotesResponseDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.diaryControllerPutPersonalEntry(updatePersonalNotesResponseDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DiaryApi.diaryControllerPutPersonalEntry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateWorkNotesResponseDto} updateWorkNotesResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async diaryControllerPutWorkEntry(updateWorkNotesResponseDto: UpdateWorkNotesResponseDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.diaryControllerPutWorkEntry(updateWorkNotesResponseDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DiaryApi.diaryControllerPutWorkEntry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DiaryApi - factory interface
 * @export
 */
export const DiaryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DiaryApiFp(configuration)
    return {
        /**
         * 
         * @param {DeleteGymEntryDto} deleteGymEntryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diaryControllerDeleteGymEntry(deleteGymEntryDto: DeleteGymEntryDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.diaryControllerDeleteGymEntry(deleteGymEntryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteHealthEntryDto} deleteHealthEntryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diaryControllerDeleteHealthEntry(deleteHealthEntryDto: DeleteHealthEntryDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.diaryControllerDeleteHealthEntry(deleteHealthEntryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeletePersonalEntryDto} deletePersonalEntryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diaryControllerDeletePersonalEntry(deletePersonalEntryDto: DeletePersonalEntryDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.diaryControllerDeletePersonalEntry(deletePersonalEntryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteWorkEntryDto} deleteWorkEntryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diaryControllerDeleteWorkEntry(deleteWorkEntryDto: DeleteWorkEntryDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.diaryControllerDeleteWorkEntry(deleteWorkEntryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {object} body 
         * @param {string} [date] date
         * @param {string} [dateFrom] date from
         * @param {string} [dateTo] date to
         * @param {DiaryControllerGetAllDataTypeEnum} [type] Entry type, should be one of: personal, gym, health, work
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diaryControllerGetAllData(body: object, date?: string, dateFrom?: string, dateTo?: string, type?: DiaryControllerGetAllDataTypeEnum, options?: RawAxiosRequestConfig): AxiosPromise<GetAllDiaryDataResponseDto> {
            return localVarFp.diaryControllerGetAllData(body, date, dateFrom, dateTo, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateGymNotesResponseDto} createGymNotesResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diaryControllerPostGymEntry(createGymNotesResponseDto: CreateGymNotesResponseDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.diaryControllerPostGymEntry(createGymNotesResponseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateHealthNotesResponseDto} createHealthNotesResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diaryControllerPostHealthEntry(createHealthNotesResponseDto: CreateHealthNotesResponseDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.diaryControllerPostHealthEntry(createHealthNotesResponseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreatePersonalNotesResponseDto} createPersonalNotesResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diaryControllerPostPersonalEntry(createPersonalNotesResponseDto: CreatePersonalNotesResponseDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.diaryControllerPostPersonalEntry(createPersonalNotesResponseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateWorkNotesResponseDto} createWorkNotesResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diaryControllerPostWorkEntry(createWorkNotesResponseDto: CreateWorkNotesResponseDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.diaryControllerPostWorkEntry(createWorkNotesResponseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateGymNotesResponseDto} updateGymNotesResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diaryControllerPutGymEntry(updateGymNotesResponseDto: UpdateGymNotesResponseDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.diaryControllerPutGymEntry(updateGymNotesResponseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateHealthNotesResponseDto} updateHealthNotesResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diaryControllerPutHealthEntry(updateHealthNotesResponseDto: UpdateHealthNotesResponseDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.diaryControllerPutHealthEntry(updateHealthNotesResponseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdatePersonalNotesResponseDto} updatePersonalNotesResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diaryControllerPutPersonalEntry(updatePersonalNotesResponseDto: UpdatePersonalNotesResponseDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.diaryControllerPutPersonalEntry(updatePersonalNotesResponseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateWorkNotesResponseDto} updateWorkNotesResponseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diaryControllerPutWorkEntry(updateWorkNotesResponseDto: UpdateWorkNotesResponseDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.diaryControllerPutWorkEntry(updateWorkNotesResponseDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DiaryApi - object-oriented interface
 * @export
 * @class DiaryApi
 * @extends {BaseAPI}
 */
export class DiaryApi extends BaseAPI {
    /**
     * 
     * @param {DeleteGymEntryDto} deleteGymEntryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiaryApi
     */
    public diaryControllerDeleteGymEntry(deleteGymEntryDto: DeleteGymEntryDto, options?: RawAxiosRequestConfig) {
        return DiaryApiFp(this.configuration).diaryControllerDeleteGymEntry(deleteGymEntryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeleteHealthEntryDto} deleteHealthEntryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiaryApi
     */
    public diaryControllerDeleteHealthEntry(deleteHealthEntryDto: DeleteHealthEntryDto, options?: RawAxiosRequestConfig) {
        return DiaryApiFp(this.configuration).diaryControllerDeleteHealthEntry(deleteHealthEntryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeletePersonalEntryDto} deletePersonalEntryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiaryApi
     */
    public diaryControllerDeletePersonalEntry(deletePersonalEntryDto: DeletePersonalEntryDto, options?: RawAxiosRequestConfig) {
        return DiaryApiFp(this.configuration).diaryControllerDeletePersonalEntry(deletePersonalEntryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeleteWorkEntryDto} deleteWorkEntryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiaryApi
     */
    public diaryControllerDeleteWorkEntry(deleteWorkEntryDto: DeleteWorkEntryDto, options?: RawAxiosRequestConfig) {
        return DiaryApiFp(this.configuration).diaryControllerDeleteWorkEntry(deleteWorkEntryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {object} body 
     * @param {string} [date] date
     * @param {string} [dateFrom] date from
     * @param {string} [dateTo] date to
     * @param {DiaryControllerGetAllDataTypeEnum} [type] Entry type, should be one of: personal, gym, health, work
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiaryApi
     */
    public diaryControllerGetAllData(body: object, date?: string, dateFrom?: string, dateTo?: string, type?: DiaryControllerGetAllDataTypeEnum, options?: RawAxiosRequestConfig) {
        return DiaryApiFp(this.configuration).diaryControllerGetAllData(body, date, dateFrom, dateTo, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateGymNotesResponseDto} createGymNotesResponseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiaryApi
     */
    public diaryControllerPostGymEntry(createGymNotesResponseDto: CreateGymNotesResponseDto, options?: RawAxiosRequestConfig) {
        return DiaryApiFp(this.configuration).diaryControllerPostGymEntry(createGymNotesResponseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateHealthNotesResponseDto} createHealthNotesResponseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiaryApi
     */
    public diaryControllerPostHealthEntry(createHealthNotesResponseDto: CreateHealthNotesResponseDto, options?: RawAxiosRequestConfig) {
        return DiaryApiFp(this.configuration).diaryControllerPostHealthEntry(createHealthNotesResponseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreatePersonalNotesResponseDto} createPersonalNotesResponseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiaryApi
     */
    public diaryControllerPostPersonalEntry(createPersonalNotesResponseDto: CreatePersonalNotesResponseDto, options?: RawAxiosRequestConfig) {
        return DiaryApiFp(this.configuration).diaryControllerPostPersonalEntry(createPersonalNotesResponseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateWorkNotesResponseDto} createWorkNotesResponseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiaryApi
     */
    public diaryControllerPostWorkEntry(createWorkNotesResponseDto: CreateWorkNotesResponseDto, options?: RawAxiosRequestConfig) {
        return DiaryApiFp(this.configuration).diaryControllerPostWorkEntry(createWorkNotesResponseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateGymNotesResponseDto} updateGymNotesResponseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiaryApi
     */
    public diaryControllerPutGymEntry(updateGymNotesResponseDto: UpdateGymNotesResponseDto, options?: RawAxiosRequestConfig) {
        return DiaryApiFp(this.configuration).diaryControllerPutGymEntry(updateGymNotesResponseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateHealthNotesResponseDto} updateHealthNotesResponseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiaryApi
     */
    public diaryControllerPutHealthEntry(updateHealthNotesResponseDto: UpdateHealthNotesResponseDto, options?: RawAxiosRequestConfig) {
        return DiaryApiFp(this.configuration).diaryControllerPutHealthEntry(updateHealthNotesResponseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdatePersonalNotesResponseDto} updatePersonalNotesResponseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiaryApi
     */
    public diaryControllerPutPersonalEntry(updatePersonalNotesResponseDto: UpdatePersonalNotesResponseDto, options?: RawAxiosRequestConfig) {
        return DiaryApiFp(this.configuration).diaryControllerPutPersonalEntry(updatePersonalNotesResponseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateWorkNotesResponseDto} updateWorkNotesResponseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiaryApi
     */
    public diaryControllerPutWorkEntry(updateWorkNotesResponseDto: UpdateWorkNotesResponseDto, options?: RawAxiosRequestConfig) {
        return DiaryApiFp(this.configuration).diaryControllerPutWorkEntry(updateWorkNotesResponseDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const DiaryControllerGetAllDataTypeEnum = {
    Personal: 'personal',
    Gym: 'gym',
    Health: 'health',
    Work: 'work'
} as const;
export type DiaryControllerGetAllDataTypeEnum = typeof DiaryControllerGetAllDataTypeEnum[keyof typeof DiaryControllerGetAllDataTypeEnum];


/**
 * MarathiApi - axios parameter creator
 * @export
 */
export const MarathiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new aarti
         * @param {CreateAartiDto} createAartiDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marathiControllerAddAarti: async (createAartiDto: CreateAartiDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAartiDto' is not null or undefined
            assertParamExists('marathiControllerAddAarti', 'createAartiDto', createAartiDto)
            const localVarPath = `/marathi/aarti`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAartiDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new song
         * @param {CreateSongDto} createSongDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marathiControllerAddSong: async (createSongDto: CreateSongDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createSongDto' is not null or undefined
            assertParamExists('marathiControllerAddSong', 'createSongDto', createSongDto)
            const localVarPath = `/marathi/song`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSongDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete aarti
         * @param {string} id The ID of the aarti to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marathiControllerDeleteAarti: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('marathiControllerDeleteAarti', 'id', id)
            const localVarPath = `/marathi/aarti/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete song
         * @param {string} id The ID of the song to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marathiControllerDeleteSong: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('marathiControllerDeleteSong', 'id', id)
            const localVarPath = `/marathi/song/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all aartis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marathiControllerGetAarti: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marathi/aarti`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get aarti by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marathiControllerGetAartiById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('marathiControllerGetAartiById', 'id', id)
            const localVarPath = `/marathi/aarti/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all songs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marathiControllerGetSong: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marathi/song`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get song by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marathiControllerGetSongById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('marathiControllerGetSongById', 'id', id)
            const localVarPath = `/marathi/song/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get songs by starting letter
         * @param {string} startLetter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marathiControllerGetSongByStartLetter: async (startLetter: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startLetter' is not null or undefined
            assertParamExists('marathiControllerGetSongByStartLetter', 'startLetter', startLetter)
            const localVarPath = `/marathi/song/{startLetter}`
                .replace(`{${"startLetter"}}`, encodeURIComponent(String(startLetter)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update aarti
         * @param {string} id 
         * @param {CreateAartiDto} createAartiDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marathiControllerUpdateAarti: async (id: string, createAartiDto: CreateAartiDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('marathiControllerUpdateAarti', 'id', id)
            // verify required parameter 'createAartiDto' is not null or undefined
            assertParamExists('marathiControllerUpdateAarti', 'createAartiDto', createAartiDto)
            const localVarPath = `/marathi/aarti/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAartiDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update song
         * @param {string} id 
         * @param {CreateSongDto} createSongDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marathiControllerUpdateSong: async (id: string, createSongDto: CreateSongDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('marathiControllerUpdateSong', 'id', id)
            // verify required parameter 'createSongDto' is not null or undefined
            assertParamExists('marathiControllerUpdateSong', 'createSongDto', createSongDto)
            const localVarPath = `/marathi/song/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSongDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MarathiApi - functional programming interface
 * @export
 */
export const MarathiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MarathiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create new aarti
         * @param {CreateAartiDto} createAartiDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marathiControllerAddAarti(createAartiDto: CreateAartiDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AartiResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marathiControllerAddAarti(createAartiDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarathiApi.marathiControllerAddAarti']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create new song
         * @param {CreateSongDto} createSongDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marathiControllerAddSong(createSongDto: CreateSongDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SongResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marathiControllerAddSong(createSongDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarathiApi.marathiControllerAddSong']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete aarti
         * @param {string} id The ID of the aarti to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marathiControllerDeleteAarti(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marathiControllerDeleteAarti(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarathiApi.marathiControllerDeleteAarti']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete song
         * @param {string} id The ID of the song to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marathiControllerDeleteSong(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marathiControllerDeleteSong(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarathiApi.marathiControllerDeleteSong']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all aartis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marathiControllerGetAarti(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AartiResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marathiControllerGetAarti(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarathiApi.marathiControllerGetAarti']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get aarti by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marathiControllerGetAartiById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AartiResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marathiControllerGetAartiById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarathiApi.marathiControllerGetAartiById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all songs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marathiControllerGetSong(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SongResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marathiControllerGetSong(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarathiApi.marathiControllerGetSong']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get song by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marathiControllerGetSongById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SongResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marathiControllerGetSongById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarathiApi.marathiControllerGetSongById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get songs by starting letter
         * @param {string} startLetter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marathiControllerGetSongByStartLetter(startLetter: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SongResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marathiControllerGetSongByStartLetter(startLetter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarathiApi.marathiControllerGetSongByStartLetter']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update aarti
         * @param {string} id 
         * @param {CreateAartiDto} createAartiDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marathiControllerUpdateAarti(id: string, createAartiDto: CreateAartiDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AartiResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marathiControllerUpdateAarti(id, createAartiDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarathiApi.marathiControllerUpdateAarti']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update song
         * @param {string} id 
         * @param {CreateSongDto} createSongDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marathiControllerUpdateSong(id: string, createSongDto: CreateSongDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SongResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marathiControllerUpdateSong(id, createSongDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarathiApi.marathiControllerUpdateSong']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MarathiApi - factory interface
 * @export
 */
export const MarathiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MarathiApiFp(configuration)
    return {
        /**
         * 
         * @summary Create new aarti
         * @param {CreateAartiDto} createAartiDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marathiControllerAddAarti(createAartiDto: CreateAartiDto, options?: RawAxiosRequestConfig): AxiosPromise<AartiResponseDto> {
            return localVarFp.marathiControllerAddAarti(createAartiDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new song
         * @param {CreateSongDto} createSongDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marathiControllerAddSong(createSongDto: CreateSongDto, options?: RawAxiosRequestConfig): AxiosPromise<SongResponseDto> {
            return localVarFp.marathiControllerAddSong(createSongDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete aarti
         * @param {string} id The ID of the aarti to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marathiControllerDeleteAarti(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.marathiControllerDeleteAarti(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete song
         * @param {string} id The ID of the song to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marathiControllerDeleteSong(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.marathiControllerDeleteSong(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all aartis
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marathiControllerGetAarti(options?: RawAxiosRequestConfig): AxiosPromise<Array<AartiResponseDto>> {
            return localVarFp.marathiControllerGetAarti(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get aarti by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marathiControllerGetAartiById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<AartiResponseDto> {
            return localVarFp.marathiControllerGetAartiById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all songs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marathiControllerGetSong(options?: RawAxiosRequestConfig): AxiosPromise<Array<SongResponseDto>> {
            return localVarFp.marathiControllerGetSong(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get song by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marathiControllerGetSongById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<SongResponseDto> {
            return localVarFp.marathiControllerGetSongById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get songs by starting letter
         * @param {string} startLetter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marathiControllerGetSongByStartLetter(startLetter: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<SongResponseDto>> {
            return localVarFp.marathiControllerGetSongByStartLetter(startLetter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update aarti
         * @param {string} id 
         * @param {CreateAartiDto} createAartiDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marathiControllerUpdateAarti(id: string, createAartiDto: CreateAartiDto, options?: RawAxiosRequestConfig): AxiosPromise<AartiResponseDto> {
            return localVarFp.marathiControllerUpdateAarti(id, createAartiDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update song
         * @param {string} id 
         * @param {CreateSongDto} createSongDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marathiControllerUpdateSong(id: string, createSongDto: CreateSongDto, options?: RawAxiosRequestConfig): AxiosPromise<SongResponseDto> {
            return localVarFp.marathiControllerUpdateSong(id, createSongDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MarathiApi - object-oriented interface
 * @export
 * @class MarathiApi
 * @extends {BaseAPI}
 */
export class MarathiApi extends BaseAPI {
    /**
     * 
     * @summary Create new aarti
     * @param {CreateAartiDto} createAartiDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarathiApi
     */
    public marathiControllerAddAarti(createAartiDto: CreateAartiDto, options?: RawAxiosRequestConfig) {
        return MarathiApiFp(this.configuration).marathiControllerAddAarti(createAartiDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new song
     * @param {CreateSongDto} createSongDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarathiApi
     */
    public marathiControllerAddSong(createSongDto: CreateSongDto, options?: RawAxiosRequestConfig) {
        return MarathiApiFp(this.configuration).marathiControllerAddSong(createSongDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete aarti
     * @param {string} id The ID of the aarti to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarathiApi
     */
    public marathiControllerDeleteAarti(id: string, options?: RawAxiosRequestConfig) {
        return MarathiApiFp(this.configuration).marathiControllerDeleteAarti(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete song
     * @param {string} id The ID of the song to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarathiApi
     */
    public marathiControllerDeleteSong(id: string, options?: RawAxiosRequestConfig) {
        return MarathiApiFp(this.configuration).marathiControllerDeleteSong(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all aartis
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarathiApi
     */
    public marathiControllerGetAarti(options?: RawAxiosRequestConfig) {
        return MarathiApiFp(this.configuration).marathiControllerGetAarti(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get aarti by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarathiApi
     */
    public marathiControllerGetAartiById(id: string, options?: RawAxiosRequestConfig) {
        return MarathiApiFp(this.configuration).marathiControllerGetAartiById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all songs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarathiApi
     */
    public marathiControllerGetSong(options?: RawAxiosRequestConfig) {
        return MarathiApiFp(this.configuration).marathiControllerGetSong(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get song by ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarathiApi
     */
    public marathiControllerGetSongById(id: string, options?: RawAxiosRequestConfig) {
        return MarathiApiFp(this.configuration).marathiControllerGetSongById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get songs by starting letter
     * @param {string} startLetter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarathiApi
     */
    public marathiControllerGetSongByStartLetter(startLetter: string, options?: RawAxiosRequestConfig) {
        return MarathiApiFp(this.configuration).marathiControllerGetSongByStartLetter(startLetter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update aarti
     * @param {string} id 
     * @param {CreateAartiDto} createAartiDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarathiApi
     */
    public marathiControllerUpdateAarti(id: string, createAartiDto: CreateAartiDto, options?: RawAxiosRequestConfig) {
        return MarathiApiFp(this.configuration).marathiControllerUpdateAarti(id, createAartiDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update song
     * @param {string} id 
     * @param {CreateSongDto} createSongDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarathiApi
     */
    public marathiControllerUpdateSong(id: string, createSongDto: CreateSongDto, options?: RawAxiosRequestConfig) {
        return MarathiApiFp(this.configuration).marathiControllerUpdateSong(id, createSongDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MessagesApi - axios parameter creator
 * @export
 */
export const MessagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ContactMeDto} contactMeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesControllerCreateMessage: async (contactMeDto: ContactMeDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactMeDto' is not null or undefined
            assertParamExists('messagesControllerCreateMessage', 'contactMeDto', contactMeDto)
            const localVarPath = `/api/v1/message/contact-me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contactMeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessagesApi - functional programming interface
 * @export
 */
export const MessagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessagesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ContactMeDto} contactMeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async messagesControllerCreateMessage(contactMeDto: ContactMeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.messagesControllerCreateMessage(contactMeDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessagesApi.messagesControllerCreateMessage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MessagesApi - factory interface
 * @export
 */
export const MessagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessagesApiFp(configuration)
    return {
        /**
         * 
         * @param {ContactMeDto} contactMeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesControllerCreateMessage(contactMeDto: ContactMeDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.messagesControllerCreateMessage(contactMeDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessagesApi - object-oriented interface
 * @export
 * @class MessagesApi
 * @extends {BaseAPI}
 */
export class MessagesApi extends BaseAPI {
    /**
     * 
     * @param {ContactMeDto} contactMeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public messagesControllerCreateMessage(contactMeDto: ContactMeDto, options?: RawAxiosRequestConfig) {
        return MessagesApiFp(this.configuration).messagesControllerCreateMessage(contactMeDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PortfolioApi - axios parameter creator
 * @export
 */
export const PortfolioApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portfolioControllerGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/portfolio/*`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portfolioControllerPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/portfolio/*`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PortfolioApi - functional programming interface
 * @export
 */
export const PortfolioApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PortfolioApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async portfolioControllerGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.portfolioControllerGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortfolioApi.portfolioControllerGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async portfolioControllerPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.portfolioControllerPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortfolioApi.portfolioControllerPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PortfolioApi - factory interface
 * @export
 */
export const PortfolioApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PortfolioApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portfolioControllerGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.portfolioControllerGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portfolioControllerPost(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.portfolioControllerPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PortfolioApi - object-oriented interface
 * @export
 * @class PortfolioApi
 * @extends {BaseAPI}
 */
export class PortfolioApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioApi
     */
    public portfolioControllerGet(options?: RawAxiosRequestConfig) {
        return PortfolioApiFp(this.configuration).portfolioControllerGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioApi
     */
    public portfolioControllerPost(options?: RawAxiosRequestConfig) {
        return PortfolioApiFp(this.configuration).portfolioControllerPost(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PrometheusApi - axios parameter creator
 * @export
 */
export const PrometheusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prometheusControllerGetMetrics: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PrometheusApi - functional programming interface
 * @export
 */
export const PrometheusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PrometheusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async prometheusControllerGetMetrics(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.prometheusControllerGetMetrics(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PrometheusApi.prometheusControllerGetMetrics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PrometheusApi - factory interface
 * @export
 */
export const PrometheusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PrometheusApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        prometheusControllerGetMetrics(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.prometheusControllerGetMetrics(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PrometheusApi - object-oriented interface
 * @export
 * @class PrometheusApi
 * @extends {BaseAPI}
 */
export class PrometheusApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrometheusApi
     */
    public prometheusControllerGetMetrics(options?: RawAxiosRequestConfig) {
        return PrometheusApiFp(this.configuration).prometheusControllerGetMetrics(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ScribbleApi - axios parameter creator
 * @export
 */
export const ScribbleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new room
         * @param {CreateRoomDto} createRoomDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scribbleControllerCreateRoom: async (createRoomDto: CreateRoomDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRoomDto' is not null or undefined
            assertParamExists('scribbleControllerCreateRoom', 'createRoomDto', createRoomDto)
            const localVarPath = `/scribble/create-room`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRoomDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Join a room
         * @param {JoinRoomDto} joinRoomDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scribbleControllerJoinRoom: async (joinRoomDto: JoinRoomDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'joinRoomDto' is not null or undefined
            assertParamExists('scribbleControllerJoinRoom', 'joinRoomDto', joinRoomDto)
            const localVarPath = `/scribble/join-room`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(joinRoomDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScribbleApi - functional programming interface
 * @export
 */
export const ScribbleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScribbleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new room
         * @param {CreateRoomDto} createRoomDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scribbleControllerCreateRoom(createRoomDto: CreateRoomDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateRoomResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scribbleControllerCreateRoom(createRoomDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScribbleApi.scribbleControllerCreateRoom']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Join a room
         * @param {JoinRoomDto} joinRoomDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scribbleControllerJoinRoom(joinRoomDto: JoinRoomDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JoinRoomResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scribbleControllerJoinRoom(joinRoomDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScribbleApi.scribbleControllerJoinRoom']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ScribbleApi - factory interface
 * @export
 */
export const ScribbleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScribbleApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new room
         * @param {CreateRoomDto} createRoomDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scribbleControllerCreateRoom(createRoomDto: CreateRoomDto, options?: RawAxiosRequestConfig): AxiosPromise<CreateRoomResponseDto> {
            return localVarFp.scribbleControllerCreateRoom(createRoomDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Join a room
         * @param {JoinRoomDto} joinRoomDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scribbleControllerJoinRoom(joinRoomDto: JoinRoomDto, options?: RawAxiosRequestConfig): AxiosPromise<JoinRoomResponseDto> {
            return localVarFp.scribbleControllerJoinRoom(joinRoomDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScribbleApi - object-oriented interface
 * @export
 * @class ScribbleApi
 * @extends {BaseAPI}
 */
export class ScribbleApi extends BaseAPI {
    /**
     * 
     * @summary Create a new room
     * @param {CreateRoomDto} createRoomDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScribbleApi
     */
    public scribbleControllerCreateRoom(createRoomDto: CreateRoomDto, options?: RawAxiosRequestConfig) {
        return ScribbleApiFp(this.configuration).scribbleControllerCreateRoom(createRoomDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Join a room
     * @param {JoinRoomDto} joinRoomDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScribbleApi
     */
    public scribbleControllerJoinRoom(joinRoomDto: JoinRoomDto, options?: RawAxiosRequestConfig) {
        return ScribbleApiFp(this.configuration).scribbleControllerJoinRoom(joinRoomDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUser: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('usersControllerGetUser', 'body', body)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdateUser: async (updateUserDto: UpdateUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateUserDto' is not null or undefined
            assertParamExists('usersControllerUpdateUser', 'updateUserDto', updateUserDto)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerGetUser(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerGetUser(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerGetUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerUpdateUser(updateUserDto: UpdateUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerUpdateUser(updateUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerUpdateUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUser(body: object, options?: RawAxiosRequestConfig): AxiosPromise<GetUserDto> {
            return localVarFp.usersControllerGetUser(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdateUser(updateUserDto: UpdateUserDto, options?: RawAxiosRequestConfig): AxiosPromise<GetUserDto> {
            return localVarFp.usersControllerUpdateUser(updateUserDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetUser(body: object, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerGetUser(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateUserDto} updateUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerUpdateUser(updateUserDto: UpdateUserDto, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerUpdateUser(updateUserDto, options).then((request) => request(this.axios, this.basePath));
    }
}



