{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/auth/register": {
      "post": {
        "operationId": "AuthController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User Created Successfully"
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Register User",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/forgot-password": {
      "post": {
        "operationId": "AuthController_forgotPassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/reset-password": {
      "post": {
        "operationId": "AuthController_resetPassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated user password"
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/update-password": {
      "post": {
        "operationId": "AuthController_updatePassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated user password"
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/logout": {
      "post": {
        "operationId": "AuthController_logout",
        "parameters": [],
        "responses": {
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Auth"
        ]
      }
    },
    "/portfolio/*": {
      "get": {
        "operationId": "PortfolioController_get",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Portfolio"
        ]
      },
      "post": {
        "operationId": "PortfolioController_post",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Portfolio"
        ]
      }
    },
    "/scribble/create-room": {
      "post": {
        "operationId": "ScribbleController_createRoom",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoomDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Room created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRoomResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Create a new room",
        "tags": [
          "Scribble"
        ]
      }
    },
    "/scribble/join-room": {
      "post": {
        "operationId": "ScribbleController_joinRoom",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JoinRoomDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Room Joind successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JoinRoomResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Join a room",
        "tags": [
          "Scribble"
        ]
      }
    },
    "/api/v1/message/contact-me": {
      "post": {
        "operationId": "MessagesController_createMessage",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactMeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Messages"
        ]
      }
    },
    "/users": {
      "get": {
        "operationId": "UsersController_getUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JWT_DTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully fetched",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "operationId": "UsersController_updateUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/diary": {
      "get": {
        "operationId": "DiaryController_getAllData",
        "parameters": [
          {
            "name": "date",
            "required": false,
            "in": "query",
            "description": "date",
            "schema": {
              "example": "2025-03-26",
              "type": "string"
            }
          },
          {
            "name": "dateFrom",
            "required": false,
            "in": "query",
            "description": "date from",
            "schema": {
              "example": "2025-03-26",
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "required": false,
            "in": "query",
            "description": "date to",
            "schema": {
              "example": "2025-03-26",
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Entry type, should be one of: personal, gym, health, work",
            "schema": {
              "enum": [
                "personal",
                "gym",
                "health",
                "work"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JWT_DTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Room created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllDiaryDataResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Diary"
        ]
      }
    },
    "/diary/entry/personal": {
      "post": {
        "operationId": "DiaryController_postPersonalEntry",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePersonalNotesResponseDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Diary"
        ]
      },
      "put": {
        "operationId": "DiaryController_putPersonalEntry",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePersonalNotesResponseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Diary"
        ]
      },
      "delete": {
        "operationId": "DiaryController_deletePersonalEntry",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeletePersonalEntryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Diary"
        ]
      }
    },
    "/diary/entry/work": {
      "post": {
        "operationId": "DiaryController_postWorkEntry",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkNotesResponseDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Diary"
        ]
      },
      "put": {
        "operationId": "DiaryController_putWorkEntry",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkNotesResponseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Diary"
        ]
      },
      "delete": {
        "operationId": "DiaryController_deleteWorkEntry",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteWorkEntryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Diary"
        ]
      }
    },
    "/diary/entry/gym": {
      "post": {
        "operationId": "DiaryController_postGymEntry",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGymNotesResponseDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Diary"
        ]
      },
      "put": {
        "operationId": "DiaryController_putGymEntry",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGymNotesResponseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Diary"
        ]
      },
      "delete": {
        "operationId": "DiaryController_deleteGymEntry",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteGymEntryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Diary"
        ]
      }
    },
    "/diary/entry/health": {
      "post": {
        "operationId": "DiaryController_postHealthEntry",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateHealthNotesResponseDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Diary"
        ]
      },
      "put": {
        "operationId": "DiaryController_putHealthEntry",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateHealthNotesResponseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Diary"
        ]
      },
      "delete": {
        "operationId": "DiaryController_deleteHealthEntry",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteHealthEntryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Diary"
        ]
      }
    },
    "/metrics": {
      "get": {
        "operationId": "PrometheusController_getMetrics",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Prometheus"
        ]
      }
    },
    "/marathi/aarti": {
      "get": {
        "operationId": "MarathiController_getAarti",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns all aartis",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AartiResponseDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all aartis",
        "tags": [
          "Marathi"
        ]
      },
      "post": {
        "operationId": "MarathiController_addAarti",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAartiDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Aarti created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AartiResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create new aarti",
        "tags": [
          "Marathi"
        ]
      }
    },
    "/marathi/aarti/{id}": {
      "get": {
        "operationId": "MarathiController_getAartiById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the aarti",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AartiResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Aarti not found"
          }
        },
        "summary": "Get aarti by ID",
        "tags": [
          "Marathi"
        ]
      },
      "put": {
        "operationId": "MarathiController_updateAarti",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAartiDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Aarti updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AartiResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Aarti not found"
          }
        },
        "summary": "Update aarti",
        "tags": [
          "Marathi"
        ]
      },
      "delete": {
        "operationId": "MarathiController_deleteAarti",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the aarti to delete",
            "schema": {
              "example": "507f1f77bcf86cd799439011",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Aarti deleted successfully"
          },
          "404": {
            "description": "Aarti not found"
          }
        },
        "summary": "Delete aarti",
        "tags": [
          "Marathi"
        ]
      }
    },
    "/marathi/song": {
      "get": {
        "operationId": "MarathiController_getSong",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns all songs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SongResponseDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all songs",
        "tags": [
          "Marathi"
        ]
      },
      "post": {
        "operationId": "MarathiController_addSong",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSongDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Song created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SongResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create new song",
        "tags": [
          "Marathi"
        ]
      }
    },
    "/marathi/song/{startLetter}": {
      "get": {
        "operationId": "MarathiController_getSongByStartLetter",
        "parameters": [
          {
            "name": "startLetter",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns songs starting with the specified letter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SongResponseDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No songs found with this starting letter"
          }
        },
        "summary": "Get songs by starting letter",
        "tags": [
          "Marathi"
        ]
      }
    },
    "/marathi/song/{id}": {
      "get": {
        "operationId": "MarathiController_getSongById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the song",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SongResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Song not found"
          }
        },
        "summary": "Get song by ID",
        "tags": [
          "Marathi"
        ]
      },
      "put": {
        "operationId": "MarathiController_updateSong",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSongDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Song updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SongResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Song not found"
          }
        },
        "summary": "Update song",
        "tags": [
          "Marathi"
        ]
      },
      "delete": {
        "operationId": "MarathiController_deleteSong",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the song to delete",
            "schema": {
              "example": "507f1f77bcf86cd799439011",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Song deleted successfully"
          },
          "404": {
            "description": "Song not found"
          }
        },
        "summary": "Delete song",
        "tags": [
          "Marathi"
        ]
      }
    }
  },
  "info": {
    "title": "Vipul Waghmare APIs",
    "description": "All the APIs created",
    "version": "0.0.2",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "schemas": {
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "example": "john.doe@email.com"
          },
          "password": {
            "type": "string",
            "example": "password@1234"
          }
        },
        "required": [
          "name",
          "email",
          "password"
        ]
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "example": "field_name",
            "description": "Field that caused the error"
          },
          "message": {
            "type": "string",
            "example": "Field is required",
            "description": "Error message"
          }
        },
        "required": [
          "field",
          "message"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 400,
            "description": "HTTP status code"
          },
          "error": {
            "type": "string",
            "example": "Bad Request",
            "description": "Error type"
          },
          "details": {
            "description": "List of validation errors",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        },
        "required": [
          "statusCode",
          "error",
          "details"
        ]
      },
      "LoginUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john.doe@email.com"
          },
          "password": {
            "type": "string",
            "example": "password@1234"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "LoginResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "string",
            "example": "User is logged in with email: user@example.com",
            "description": "Success message"
          },
          "accessToken": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "description": "JWT access token"
          },
          "userId": {
            "type": "string",
            "example": "507f1f77bcf86cd799439011",
            "description": "MongoDB user ID"
          },
          "email": {
            "type": "string",
            "example": "user@example.com",
            "description": "User email"
          },
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "User name"
          }
        },
        "required": [
          "success",
          "accessToken",
          "userId",
          "email",
          "name"
        ]
      },
      "ForgotPasswordDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "john.doe@email.com"
          }
        },
        "required": [
          "email"
        ]
      },
      "ResetPasswordDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "token-received-in-mail"
          },
          "password": {
            "type": "string",
            "example": "new.password@1234"
          }
        },
        "required": [
          "token",
          "password"
        ]
      },
      "UpdatePasswordDto": {
        "type": "object",
        "properties": {
          "newPassword": {
            "type": "string",
            "example": "new.password@1234"
          },
          "password": {
            "type": "string",
            "example": "password@1234"
          }
        },
        "required": [
          "newPassword",
          "password"
        ]
      },
      "CreateRoomDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "John Doe"
          }
        },
        "required": [
          "username"
        ]
      },
      "CreateRoomResponseDto": {
        "type": "object",
        "properties": {
          "roomId": {
            "type": "string",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          }
        },
        "required": [
          "roomId"
        ]
      },
      "JoinRoomDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "John Doe"
          },
          "roomId": {
            "type": "string",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          }
        },
        "required": [
          "username",
          "roomId"
        ]
      },
      "JoinRoomResponseDto": {
        "type": "object",
        "properties": {
          "roomId": {
            "type": "string",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          }
        },
        "required": [
          "roomId"
        ]
      },
      "ContactMeDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "example": "john.doe@email.com"
          },
          "subject": {
            "type": "string",
            "example": "Regarding a job opportunity"
          },
          "message": {
            "type": "string",
            "example": "Hi Vipul, ..."
          }
        },
        "required": [
          "name",
          "email",
          "subject",
          "message"
        ]
      },
      "JWT_DTO": {
        "type": "object",
        "properties": {}
      },
      "GetUserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the user",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "The email of the user",
            "example": "john.doe@example.com"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The phone number of the user",
            "example": "+1234567890"
          },
          "dob": {
            "type": "string",
            "description": "The date of birth of the user",
            "example": "2021-01-01"
          },
          "bio": {
            "type": "string",
            "description": "The bio of the user",
            "example": "I am a software engineer"
          },
          "id": {
            "type": "string",
            "description": "The ID of the user",
            "example": "1234567890"
          }
        },
        "required": [
          "name",
          "email",
          "phoneNumber",
          "dob",
          "bio",
          "id"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the user",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "The email of the user",
            "example": "john.doe@example.com"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The phone number of the user",
            "example": "+1234567890"
          },
          "dob": {
            "type": "string",
            "description": "The date of birth of the user",
            "example": "2021-01-01"
          },
          "bio": {
            "type": "string",
            "description": "The bio of the user",
            "example": "I am a software engineer"
          }
        },
        "required": [
          "name",
          "email",
          "phoneNumber",
          "dob",
          "bio"
        ]
      },
      "GetPersonalNotesResponseDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Weekend Trip to the Mountains",
            "description": "The title of the event"
          },
          "content": {
            "type": "string",
            "example": "Had an amazing time hiking in the mountains this weekend",
            "description": "A brief description of the event"
          },
          "_id": {
            "type": "string",
            "example": "67eb8c8028300395ab7df7a0",
            "description": "id of the event"
          }
        },
        "required": [
          "title",
          "content",
          "_id"
        ]
      },
      "GetWorkNotesResponseDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Client Meeting",
            "description": "The title of the event"
          },
          "content": {
            "type": "string",
            "example": "Had a productive meeting with the client.",
            "description": "A brief description of the event"
          },
          "_id": {
            "type": "string",
            "example": "67eb8c8028300395ab7df7a0",
            "description": "id of the event"
          }
        },
        "required": [
          "title",
          "content",
          "_id"
        ]
      },
      "GetGymProgressResponseExerciseDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Bench Press",
            "description": "The name of the exercise"
          },
          "sets": {
            "type": "number",
            "example": 3,
            "description": "The number of sets"
          },
          "reps": {
            "type": "number",
            "example": 10,
            "description": "The number of reps"
          },
          "weight": {
            "type": "number",
            "example": 80,
            "description": "The weight in kg"
          },
          "duration": {
            "type": "number",
            "example": 30,
            "description": "The duration in minutes"
          },
          "_id": {
            "type": "string",
            "example": "67eb8c8028300395ab7df7a0",
            "description": "id of the event"
          }
        },
        "required": [
          "name",
          "sets",
          "reps",
          "_id"
        ]
      },
      "GetGymProgressResponseDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "Strength Training",
            "description": "The type of workout"
          },
          "duration": {
            "type": "number",
            "example": 60,
            "description": "The duration of the workout in minutes"
          },
          "exercises": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetGymProgressResponseExerciseDto"
            }
          },
          "notes": {
            "type": "string",
            "example": "Great workout today. Increased weight on bench press.",
            "description": "A brief description of the workout"
          },
          "_id": {
            "type": "string",
            "example": "67eb8c8028300395ab7df7a0",
            "description": "id of the event"
          }
        },
        "required": [
          "type",
          "duration",
          "exercises",
          "notes",
          "_id"
        ]
      },
      "GetDietEntryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Biryani",
            "description": "The name of the food item"
          },
          "calories": {
            "type": "number",
            "example": 600,
            "description": "The calories contained in the food item"
          },
          "_id": {
            "type": "string",
            "example": "67eb8c8028300395ab7df7a0",
            "description": "id of the event"
          }
        },
        "required": [
          "name",
          "calories",
          "_id"
        ]
      },
      "GetHealthLogResponseDto": {
        "type": "object",
        "properties": {
          "diet": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetDietEntryDto"
            }
          },
          "notes": {
            "type": "string",
            "example": "Had a cheat meal for dinner. Otherwise, stuck to my meal plan.",
            "description": "Notes about the diet and health"
          }
        },
        "required": [
          "diet",
          "notes"
        ]
      },
      "GetAllDiaryDataResponseDto": {
        "type": "object",
        "properties": {
          "personal": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetPersonalNotesResponseDto"
            }
          },
          "work": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetWorkNotesResponseDto"
            }
          },
          "gym": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetGymProgressResponseDto"
            }
          },
          "health": {
            "$ref": "#/components/schemas/GetHealthLogResponseDto"
          },
          "weight": {
            "type": "number",
            "example": 11,
            "description": "The weight of the person in kg"
          },
          "height": {
            "type": "number",
            "example": 12,
            "description": "The height of the person in cm"
          },
          "_id": {
            "type": "string",
            "example": "67eb8c8028300395ab7df7a0",
            "description": "id of the event"
          },
          "userId": {
            "type": "string",
            "example": "67eb8c8028300395ab7df7a0",
            "description": "user id"
          },
          "date": {
            "type": "string",
            "example": "2025-03-26",
            "description": "date"
          }
        },
        "required": [
          "personal",
          "work",
          "gym",
          "health",
          "weight",
          "height",
          "_id",
          "userId",
          "date"
        ]
      },
      "CreatePersonalNotesResponseDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Weekend Trip to the Mountains",
            "description": "The title of the event"
          },
          "content": {
            "type": "string",
            "example": "Had an amazing time hiking in the mountains this weekend",
            "description": "A brief description of the event"
          },
          "date": {
            "type": "string",
            "example": "2025-03-26",
            "description": "The date of the event"
          }
        },
        "required": [
          "title",
          "content",
          "date"
        ]
      },
      "CreateWorkNotesResponseDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Client Meeting",
            "description": "The title of the event"
          },
          "content": {
            "type": "string",
            "example": "Had a productive meeting with the client.",
            "description": "A brief description of the event"
          },
          "date": {
            "type": "string",
            "example": "2025-03-26",
            "description": "The date of the event"
          }
        },
        "required": [
          "title",
          "content",
          "date"
        ]
      },
      "GymProgressExerciseDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Bench Press",
            "description": "The name of the exercise"
          },
          "sets": {
            "type": "number",
            "example": 3,
            "description": "The number of sets"
          },
          "reps": {
            "type": "number",
            "example": 10,
            "description": "The number of reps"
          },
          "weight": {
            "type": "number",
            "example": 80,
            "description": "The weight in kg"
          },
          "duration": {
            "type": "number",
            "example": 30,
            "description": "The duration in minutes"
          }
        },
        "required": [
          "name",
          "sets",
          "reps"
        ]
      },
      "CreateGymNotesResponseDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "Strength Training",
            "description": "The type of workout"
          },
          "duration": {
            "type": "number",
            "example": 60,
            "description": "The duration of the workout in minutes"
          },
          "exercises": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GymProgressExerciseDto"
            }
          },
          "notes": {
            "type": "string",
            "example": "Great workout today. Increased weight on bench press.",
            "description": "A brief description of the workout"
          },
          "date": {
            "type": "string",
            "example": "2025-03-26",
            "description": "The date of the event"
          }
        },
        "required": [
          "type",
          "duration",
          "exercises",
          "notes",
          "date"
        ]
      },
      "DietEntryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Biryani",
            "description": "The name of the food item"
          },
          "calories": {
            "type": "number",
            "example": 600,
            "description": "The calories contained in the food item"
          }
        },
        "required": [
          "name",
          "calories"
        ]
      },
      "CreateHealthNotesResponseDto": {
        "type": "object",
        "properties": {
          "diet": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DietEntryDto"
            }
          },
          "notes": {
            "type": "string",
            "example": "Had a cheat meal for dinner. Otherwise, stuck to my meal plan.",
            "description": "Notes about the diet and health"
          },
          "date": {
            "type": "string",
            "example": "2025-03-26",
            "description": "The date of the event"
          }
        },
        "required": [
          "diet",
          "notes",
          "date"
        ]
      },
      "UpdatePersonalNotesResponseDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Weekend Trip to the Mountains",
            "description": "The title of the event"
          },
          "content": {
            "type": "string",
            "example": "Had an amazing time hiking in the mountains this weekend",
            "description": "A brief description of the event"
          },
          "date": {
            "type": "string",
            "example": "2025-03-26",
            "description": "The date of the event"
          },
          "id": {
            "type": "string",
            "example": "12345678-1234-1234-1234-123456789012",
            "description": "The ID of the event"
          }
        },
        "required": [
          "title",
          "content",
          "date",
          "id"
        ]
      },
      "UpdateWorkNotesResponseDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Client Meeting",
            "description": "The title of the event"
          },
          "content": {
            "type": "string",
            "example": "Had a productive meeting with the client.",
            "description": "A brief description of the event"
          },
          "date": {
            "type": "string",
            "example": "2025-03-26",
            "description": "The date of the event"
          },
          "id": {
            "type": "string",
            "example": "12345678-1234-1234-1234-123456789012",
            "description": "The ID of the event"
          }
        },
        "required": [
          "title",
          "content",
          "date",
          "id"
        ]
      },
      "UpdateGymNotesResponseDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "Strength Training",
            "description": "The type of workout"
          },
          "duration": {
            "type": "number",
            "example": 60,
            "description": "The duration of the workout in minutes"
          },
          "exercises": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GymProgressExerciseDto"
            }
          },
          "notes": {
            "type": "string",
            "example": "Great workout today. Increased weight on bench press.",
            "description": "A brief description of the workout"
          },
          "date": {
            "type": "string",
            "example": "2025-03-26",
            "description": "The date of the event"
          },
          "id": {
            "type": "string",
            "example": "12345678-1234-1234-1234-123456789012",
            "description": "The ID of the event"
          }
        },
        "required": [
          "type",
          "duration",
          "exercises",
          "notes",
          "date",
          "id"
        ]
      },
      "UpdateHealthNotesResponseDto": {
        "type": "object",
        "properties": {
          "diet": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DietEntryDto"
            }
          },
          "notes": {
            "type": "string",
            "example": "Had a cheat meal for dinner. Otherwise, stuck to my meal plan.",
            "description": "Notes about the diet and health"
          },
          "date": {
            "type": "string",
            "example": "2025-03-26",
            "description": "The date of the event"
          }
        },
        "required": [
          "diet",
          "notes",
          "date"
        ]
      },
      "DeletePersonalEntryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "date": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "date"
        ]
      },
      "DeleteWorkEntryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "date": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "date"
        ]
      },
      "DeleteGymEntryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "date": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "date"
        ]
      },
      "DeleteHealthEntryDto": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string"
          }
        },
        "required": [
          "date"
        ]
      },
      "AartiResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name_marathi": {
            "type": "string"
          },
          "name_english": {
            "type": "string"
          },
          "deity": {
            "type": "string"
          },
          "lyrics_marathi": {
            "type": "string"
          },
          "lyrics_english": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "name_marathi",
          "name_english",
          "deity",
          "lyrics_marathi",
          "lyrics_english",
          "tags"
        ]
      },
      "CreateAartiDto": {
        "type": "object",
        "properties": {
          "name_marathi": {
            "type": "string",
            "example": "सुखकर्ता दुःखहर्ता",
            "description": "Name of the aarti in Marathi"
          },
          "name_english": {
            "type": "string",
            "example": "Sukhakarta Dukhharta",
            "description": "Name of the aarti in English"
          },
          "deity": {
            "type": "string",
            "example": "श्री गणेश",
            "description": "Name of the deity"
          },
          "lyrics_marathi": {
            "type": "string",
            "example": "सुखकर्ता दुःखहर्ता वार्ता विघ्नाची",
            "description": "Lyrics of the aarti in Marathi"
          },
          "lyrics_english": {
            "type": "string",
            "example": "Sukhakarta Dukhharta Varta Vighnachi",
            "description": "Lyrics of the aarti in English"
          },
          "tags": {
            "example": [
              "गणेश",
              "आरती"
            ],
            "description": "Tags/categories for the aarti",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name_marathi",
          "name_english",
          "deity",
          "lyrics_marathi",
          "lyrics_english",
          "tags"
        ]
      },
      "MusicLinksResponseDto": {
        "type": "object",
        "properties": {
          "spotify": {
            "type": "string"
          },
          "youtube": {
            "type": "string"
          },
          "jiosaavn": {
            "type": "string"
          },
          "gaana": {
            "type": "string"
          }
        }
      },
      "SongResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name_marathi": {
            "type": "string"
          },
          "name_english": {
            "type": "string"
          },
          "lyrics_marathi": {
            "type": "string"
          },
          "lyrics_english": {
            "type": "string"
          },
          "meaning": {
            "type": "string"
          },
          "singer": {
            "type": "string"
          },
          "lyricist": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "musicLinks": {
            "$ref": "#/components/schemas/MusicLinksResponseDto"
          },
          "startLetter": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name_marathi",
          "name_english",
          "lyrics_english",
          "startLetter"
        ]
      },
      "MusicLinksDto": {
        "type": "object",
        "properties": {
          "spotify": {
            "type": "string",
            "example": "https://open.spotify.com/track/123",
            "description": "Spotify link for the song"
          },
          "youtube": {
            "type": "string",
            "example": "https://youtube.com/watch?v=123",
            "description": "YouTube link for the song"
          },
          "jiosaavn": {
            "type": "string",
            "example": "https://jiosaavn.com/song/123",
            "description": "JioSaavn link for the song"
          },
          "gaana": {
            "type": "string",
            "example": "https://gaana.com/song/123",
            "description": "Gaana link for the song"
          }
        }
      },
      "CreateSongDto": {
        "type": "object",
        "properties": {
          "name_marathi": {
            "type": "string",
            "example": "अबोली",
            "description": "Name of the song in Marathi"
          },
          "name_english": {
            "type": "string",
            "example": "Aboli",
            "description": "Name of the song in English"
          },
          "lyrics_marathi": {
            "type": "string",
            "example": "अबोली माझी माळावरती फुलली",
            "description": "Lyrics of the song in Marathi"
          },
          "lyrics_english": {
            "type": "string",
            "example": "Aboli majhi maalavrati phulali",
            "description": "Lyrics of the song in English"
          },
          "meaning": {
            "type": "string",
            "example": "This song describes the beauty of the Aboli flower blooming on a hill",
            "description": "Meaning or description of the song"
          },
          "singer": {
            "type": "string",
            "example": "लता मंगेशकर",
            "description": "Name of the singer"
          },
          "lyricist": {
            "type": "string",
            "example": "ग. दि. माडगूळकर",
            "description": "Name of the lyricist"
          },
          "tags": {
            "example": [
              "भावगीत",
              "निसर्ग"
            ],
            "description": "Tags/categories for the song",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "musicLinks": {
            "$ref": "#/components/schemas/MusicLinksDto"
          },
          "startLetter": {
            "type": "string",
            "example": "अ",
            "description": "Starting letter of the song in Marathi"
          }
        },
        "required": [
          "name_marathi",
          "name_english",
          "lyrics_english",
          "startLetter"
        ]
      }
    }
  }
}